<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * appProdUrlGenerator
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appProdUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes = array(
        'genemu_upload' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Genemu\\Bundle\\FormBundle\\Controller\\UploadController::uploadAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/genemu_upload',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'genemu_form_image' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Genemu\\Bundle\\FormBundle\\Controller\\ImageController::changeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/genemu_change_image',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'bash_nodes_homepage' => array (  0 =>   array (    0 => 'name',  ),  1 =>   array (    '_controller' => 'BashNodesBundle:Default:index',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'name',    ),    1 =>     array (      0 => 'text',      1 => '/hello',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_recent' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::recentAction',  ),  2 =>   array (    '_method' => 'GET',    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/recent',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_best' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::bestAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/best',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_rss' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::rssAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/rss',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_random' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::randomAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/random',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_govnokod' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::govnokodAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/govnokod',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_addquote' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::addquoteAction',  ),  2 =>   array (    '_method' => 'POST|GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/add_quote',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_addcode' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::addcodeAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/add_code',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_myquotes' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::myquotesAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/myquotes',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_post' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::postAction',  ),  2 =>   array (    '_method' => 'POST|GET',    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/node',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_comment_create' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\CommentController::createAction',  ),  2 =>   array (    '_method' => 'POST|GET',    'blog_id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/comment',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_quote_create' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\QuoteController::createAction',  ),  2 =>   array (    '_method' => 'POST|GET',    'blog_id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/quote',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_aquotes' => array (  0 =>   array (    0 => 'author',  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\QuoteController::aquotesAction',  ),  2 =>   array (    '_method' => 'POST|GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'author',    ),    1 =>     array (      0 => 'text',      1 => '/quotes',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_user' => array (  0 =>   array (    0 => 'user',  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::userAction',  ),  2 =>   array (    '_method' => 'POST|GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'user',    ),    1 =>     array (      0 => 'text',      1 => '/user',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_edit' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::editAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/edit',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'BashBashBundle_dell' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\PageController::dellAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/dell',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sonata_admin_redirect' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController::redirectAction',    'route' => 'sonata_admin_dashboard',    'permanent' => 'true',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sonata_admin_dashboard' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Sonata\\AdminBundle\\Controller\\CoreController::dashboardAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/dashboard',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sonata_admin_retrieve_form_element' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'sonata.admin.controller.admin:retrieveFormFieldElementAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/core/get-form-field-element',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sonata_admin_append_form_element' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'sonata.admin.controller.admin:appendFormFieldElementAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/core/append-form-field-element',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sonata_admin_short_object_information' => array (  0 =>   array (    0 => '_format',  ),  1 =>   array (    '_controller' => 'sonata.admin.controller.admin:getShortObjectDescriptionAction',    '_format' => 'html',  ),  2 =>   array (    '_format' => 'html|json',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'html|json',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/admin/core/get-short-object-description',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sonata_admin_set_object_field_value' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'sonata.admin.controller.admin:setObjectFieldValueAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/core/set-object-field-value',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sonata_admin_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Sonata\\AdminBundle\\Controller\\CoreController::searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_bash_user_list' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\UserAdminController::listAction',    '_sonata_admin' => 'blogger.symblog.admin.user',    '_sonata_name' => 'admin_bash_bash_user_list',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/bash/user/list',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_bash_user_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\UserAdminController::createAction',    '_sonata_admin' => 'blogger.symblog.admin.user',    '_sonata_name' => 'admin_bash_bash_user_create',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/bash/user/create',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_bash_user_batch' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\UserAdminController::batchAction',    '_sonata_admin' => 'blogger.symblog.admin.user',    '_sonata_name' => 'admin_bash_bash_user_batch',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/bash/user/batch',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_bash_user_edit' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\UserAdminController::editAction',    '_sonata_admin' => 'blogger.symblog.admin.user',    '_sonata_name' => 'admin_bash_bash_user_edit',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/edit',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/admin/bash/bash/user',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_bash_user_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\UserAdminController::deleteAction',    '_sonata_admin' => 'blogger.symblog.admin.user',    '_sonata_name' => 'admin_bash_bash_user_delete',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/delete',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/admin/bash/bash/user',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_bash_user_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\UserAdminController::showAction',    '_sonata_admin' => 'blogger.symblog.admin.user',    '_sonata_name' => 'admin_bash_bash_user_show',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/show',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/admin/bash/bash/user',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_bash_user_export' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\BashBundle\\Controller\\UserAdminController::exportAction',    '_sonata_admin' => 'blogger.symblog.admin.user',    '_sonata_name' => 'admin_bash_bash_user_export',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/bash/user/export',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_quote_list' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\QuoteAdminController::listAction',    '_sonata_admin' => 'blogger.symblog.admin.blog',    '_sonata_name' => 'admin_bash_nodes_quote_list',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/quote/list',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_quote_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\QuoteAdminController::createAction',    '_sonata_admin' => 'blogger.symblog.admin.blog',    '_sonata_name' => 'admin_bash_nodes_quote_create',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/quote/create',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_quote_batch' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\QuoteAdminController::batchAction',    '_sonata_admin' => 'blogger.symblog.admin.blog',    '_sonata_name' => 'admin_bash_nodes_quote_batch',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/quote/batch',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_quote_edit' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\QuoteAdminController::editAction',    '_sonata_admin' => 'blogger.symblog.admin.blog',    '_sonata_name' => 'admin_bash_nodes_quote_edit',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/edit',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/quote',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_quote_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\QuoteAdminController::deleteAction',    '_sonata_admin' => 'blogger.symblog.admin.blog',    '_sonata_name' => 'admin_bash_nodes_quote_delete',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/delete',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/quote',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_quote_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\QuoteAdminController::showAction',    '_sonata_admin' => 'blogger.symblog.admin.blog',    '_sonata_name' => 'admin_bash_nodes_quote_show',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/show',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/quote',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_quote_export' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\QuoteAdminController::exportAction',    '_sonata_admin' => 'blogger.symblog.admin.blog',    '_sonata_name' => 'admin_bash_nodes_quote_export',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/quote/export',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_comment_list' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\CommentAdminController::listAction',    '_sonata_admin' => 'blogger.symblog.admin.comment',    '_sonata_name' => 'admin_bash_nodes_comment_list',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/comment/list',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_comment_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\CommentAdminController::createAction',    '_sonata_admin' => 'blogger.symblog.admin.comment',    '_sonata_name' => 'admin_bash_nodes_comment_create',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/comment/create',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_comment_batch' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\CommentAdminController::batchAction',    '_sonata_admin' => 'blogger.symblog.admin.comment',    '_sonata_name' => 'admin_bash_nodes_comment_batch',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/comment/batch',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_comment_edit' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\CommentAdminController::editAction',    '_sonata_admin' => 'blogger.symblog.admin.comment',    '_sonata_name' => 'admin_bash_nodes_comment_edit',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/edit',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/comment',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_comment_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\CommentAdminController::deleteAction',    '_sonata_admin' => 'blogger.symblog.admin.comment',    '_sonata_name' => 'admin_bash_nodes_comment_delete',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/delete',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/comment',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_comment_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\CommentAdminController::showAction',    '_sonata_admin' => 'blogger.symblog.admin.comment',    '_sonata_name' => 'admin_bash_nodes_comment_show',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/show',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/comment',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'admin_bash_nodes_comment_export' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Bash\\NodesBundle\\Controller\\CommentAdminController::exportAction',    '_sonata_admin' => 'blogger.symblog.admin.comment',    '_sonata_name' => 'admin_bash_nodes_comment_export',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin/bash/nodes/comment/export',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_security_login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::loginAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_security_check' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::checkAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login_check',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_security_logout' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::logoutAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/logout',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_profile_show' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::showAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/profile/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_profile_edit' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::editAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/profile/edit',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_register' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::registerAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_check_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::checkEmailAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/check-email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_confirm' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/register/confirm',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_registration_confirmed' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmedAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/confirmed',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_request' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::requestAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/request',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_send_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::sendEmailAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/send-email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_check_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::checkEmailAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/check-email',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_resetting_reset' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::resetAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/resetting/reset',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_user_change_password' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ChangePasswordController::changePasswordAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/profile/change-password',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    );

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }
}
